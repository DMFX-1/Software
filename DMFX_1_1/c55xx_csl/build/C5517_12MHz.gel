/* This is for Power measurement. */
/* All Peripherals are off.				*/

#define IDLE_CTRL0  0x1c02
#define IDLE_CTRL1  0x1c03

#define CLKCFGMSW   0x1c1f
#define PLL_CNTL1   0x1c20
#define PLL_CNTL2   0x1c21
#define PLL_CNTL3   0x1c22
#define PLL_CNTL4   0x1c23
#define CLKOUT_CFG  0x1c24

#define PSRCR       0x1c04
#define PRCR        0x1c05

/* The Startup() function is executed when the GEL file is loaded. */
StartUp()
{
    C5517_MapInit();
}

/* The OnTargetConnect() function is executed when the target is connected. */
OnTargetConnect()
{
    GEL_Reset();
    C5517_MapInit();
    //ProgramPLL_100MHz_clksel0();		
	ProgramPLL_12MHz_clksel0();
    GEL_TextOut("Target Connection Complete.\n");
}

menuitem "C5517EVM_Configuration";
hotmenu CPU_Reset()
{
    GEL_Reset();
    GEL_TextOut("CPU Reset Complete.\n");
}

hotmenu C5517EVM_Init()
{
    GEL_Reset();
    C5517_MapInit();
    GEL_TextOut("C5517EVM Initialization Complete.\n");
}

hotmenu SetPLL_BYPASS() {
    ProgramPLL_BYPASS();
}

hotmenu SetPLL_CLKOUT_ON() {
    ProgramPLL_CLKOUT_ON();
}

hotmenu SetPLL_1MHz_clksel0() {
    ProgramPLL_1MHz_clksel0();
}

hotmenu SetPLL_2MHz_clksel0() {
    ProgramPLL_2MHz_clksel0();
}

hotmenu SetPLL_4MHz_clksel0() {
    ProgramPLL_4MHz_clksel0();
}

hotmenu SetPLL_8MHz_clksel0() {
    ProgramPLL_8MHz_clksel0();
}

hotmenu SetPLL_10MHz_clksel0() {
    ProgramPLL_10MHz_clksel0();
}

hotmenu SetPLL_25MHz_clksel0() {
    ProgramPLL_25MHz_clksel0();
}

hotmenu SetPLL_50MHz_clksel0() {
    ProgramPLL_50MHz_clksel0();
}

hotmenu SetPLL_60MHz_clksel0() {
    ProgramPLL_60MHz_clksel0();
}

hotmenu SetPLL_75MHz_clksel0() {
    ProgramPLL_75MHz_clksel0();
}

hotmenu SetPLL_80MHz_clksel0() {
    ProgramPLL_80MHz_clksel0();
}

hotmenu SetPLL_90MHz_clksel0() {
    ProgramPLL_90MHz_clksel0();
}

hotmenu SetPLL_100MHz_clksel0() {
    ProgramPLL_100MHz_clksel0();
}

hotmenu SetPLL_120MHz_clksel0() {
    ProgramPLL_120MHz_clksel0();
}

hotmenu SetPLL_125MHz_clksel0() {
    ProgramPLL_125MHz_clksel0();
}

hotmenu SetPLL_128MHz_clksel0() {
    ProgramPLL_128MHz_clksel0();
}

hotmenu SetPLL_150MHz_clksel0() {
    ProgramPLL_150MHz_clksel0();
}

hotmenu SetPLL_175MHz_clksel0() {
    ProgramPLL_175MHz_clksel0();
}

hotmenu SetPLL_180MHz_clksel0() {
    ProgramPLL_180MHz_clksel0();
}

hotmenu SetPLL_190MHz_clksel0() {
    ProgramPLL_190MHz_clksel0();
}

hotmenu SetPLL_200MHz_clksel0() {
    ProgramPLL_200MHz_clksel0();
}

hotmenu SetPLL_225MHz_clksel0() {
    ProgramPLL_225MHz_clksel0();
}


hotmenu Peripheral_Reset() {
    int i;

    *(short *)PSRCR@IO = 0x0002;
    *(short *)PRCR@IO  = 0x00FF;

    for(i=0;i<0xff;i++);

    GEL_TextOut("Reset Peripherals is complete.\n");
}


// ***************************************************************************

/* Memory map based on MP/MC value=0 (BOOTM[2:0]=0).    */
C5517_MapInit() {
    GEL_MapOn();
    GEL_MapReset();

    /*Program Space*/

    /* DARAM */
    GEL_MapAdd(0x0000C0,0,0x001F40,1,1);    /* DARAM0 */
    GEL_MapAdd(0x002000,0,0x002000,1,1);    /* DARAM1 */
    GEL_MapAdd(0x004000,0,0x002000,1,1);    /* DARAM2 */
    GEL_MapAdd(0x006000,0,0x002000,1,1);    /* DARAM3 */
    GEL_MapAdd(0x008000,0,0x002000,1,1);    /* DARAM4 */
    GEL_MapAdd(0x00A000,0,0x002000,1,1);    /* DARAM5 */
    GEL_MapAdd(0x00C000,0,0x002000,1,1);    /* DARAM6 */
    GEL_MapAdd(0x00E000,0,0x002000,1,1);    /* DARAM7 */

    /* SARAM */
    GEL_MapAdd(0x010000,0,0x002000,1,1);    /* SARAM0 */
    GEL_MapAdd(0x012000,0,0x002000,1,1);    /* SARAM1 */
    GEL_MapAdd(0x014000,0,0x002000,1,1);    /* SARAM2 */
    GEL_MapAdd(0x016000,0,0x002000,1,1);    /* SARAM3 */
    GEL_MapAdd(0x018000,0,0x002000,1,1);    /* SARAM4 */
    GEL_MapAdd(0x01A000,0,0x002000,1,1);    /* SARAM5 */
    GEL_MapAdd(0x01C000,0,0x002000,1,1);    /* SARAM6 */
    GEL_MapAdd(0x01E000,0,0x002000,1,1);    /* SARAM7 */
    GEL_MapAdd(0x020000,0,0x002000,1,1);    /* SARAM8 */
    GEL_MapAdd(0x022000,0,0x002000,1,1);    /* SARAM9 */
    GEL_MapAdd(0x024000,0,0x002000,1,1);    /* SARAM10 */
    GEL_MapAdd(0x026000,0,0x002000,1,1);    /* SARAM11 */
    GEL_MapAdd(0x028000,0,0x002000,1,1);    /* SARAM12 */
    GEL_MapAdd(0x02A000,0,0x002000,1,1);    /* SARAM13 */
    GEL_MapAdd(0x02C000,0,0x002000,1,1);    /* SARAM14 */
    GEL_MapAdd(0x02E000,0,0x002000,1,1);    /* SARAM15 */
    GEL_MapAdd(0x030000,0,0x002000,1,1);    /* SARAM16 */
    GEL_MapAdd(0x032000,0,0x002000,1,1);    /* SARAM17 */
    GEL_MapAdd(0x034000,0,0x002000,1,1);    /* SARAM18 */
    GEL_MapAdd(0x036000,0,0x002000,1,1);    /* SARAM19 */
    GEL_MapAdd(0x038000,0,0x002000,1,1);    /* SARAM20 */
    GEL_MapAdd(0x03A000,0,0x002000,1,1);    /* SARAM21 */
    GEL_MapAdd(0x03C000,0,0x002000,1,1);    /* SARAM22 */
    GEL_MapAdd(0x03E000,0,0x002000,1,1);    /* SARAM23 */
    GEL_MapAdd(0x040000,0,0x002000,1,1);    /* SARAM24 */
    GEL_MapAdd(0x042000,0,0x002000,1,1);    /* SARAM25 */
    GEL_MapAdd(0x044000,0,0x002000,1,1);    /* SARAM26 */
    GEL_MapAdd(0x046000,0,0x002000,1,1);    /* SARAM27 */
    GEL_MapAdd(0x048000,0,0x002000,1,1);    /* SARAM28 */
    GEL_MapAdd(0x04A000,0,0x002000,1,1);    /* SARAM29 */
    GEL_MapAdd(0x04C000,0,0x002000,1,1);    /* SARAM30 */
    GEL_MapAdd(0x04E000,0,0x002000,1,1);    /* SARAM31 */

    /* External-Memory */
    GEL_MapAdd(0x050000,0,0x7B0000,1,1);    /* External-SDRAM */
    GEL_MapAdd(0x800000,0,0x400000,1,1);    /* External-Async */
    GEL_MapAdd(0xC00000,0,0x200000,1,1);    /* External-Async */
    GEL_MapAdd(0xE00000,0,0x100000,1,1);    /* External-Async */
    GEL_MapAdd(0xF00000,0,0x0E0000,1,1);    /* External-Async */

    /* ROM */
    GEL_MapAdd(0xFE0000,0,0x008000,1,0);    /* SAROM0 */
    GEL_MapAdd(0xFE8000,0,0x008000,1,0);    /* SAROM1 */
    GEL_MapAdd(0xFF0000,0,0x008000,1,0);    /* SAROM2 */
    GEL_MapAdd(0xFF8000,0,0x008000,1,0);    /* SAROM3 */

    /* Data Space */

    /* DARAM */
    GEL_MapAdd(0x000000,1,0x000060,1,1);    /* MMRs */
    GEL_MapAdd(0x000060,1,0x000FA0,1,1);    /* DARAM0 */
    GEL_MapAdd(0x001000,1,0x001000,1,1);    /* DARAM1 */
    GEL_MapAdd(0x002000,1,0x001000,1,1);    /* DARAM2 */
    GEL_MapAdd(0x003000,1,0x001000,1,1);    /* DARAM3 */
    GEL_MapAdd(0x004000,1,0x001000,1,1);    /* DARAM4 */
    GEL_MapAdd(0x005000,1,0x001000,1,1);    /* DARAM5 */
    GEL_MapAdd(0x006000,1,0x001000,1,1);    /* DARAM6 */
    GEL_MapAdd(0x007000,1,0x001000,1,1);    /* DARAM7 */

    /* SARAM */
    GEL_MapAdd(0x008000,1,0x001000,1,1);    /* SARAM0 */
    GEL_MapAdd(0x009000,1,0x001000,1,1);    /* SARAM1 */
    GEL_MapAdd(0x00A000,1,0x001000,1,1);    /* SARAM2 */
    GEL_MapAdd(0x00B000,1,0x001000,1,1);    /* SARAM3 */
    GEL_MapAdd(0x00C000,1,0x001000,1,1);    /* SARAM4 */
    GEL_MapAdd(0x00D000,1,0x001000,1,1);    /* SARAM5 */
    GEL_MapAdd(0x00E000,1,0x001000,1,1);    /* SARAM6 */
    GEL_MapAdd(0x00F000,1,0x001000,1,1);    /* SARAM7 */
    GEL_MapAdd(0x010000,1,0x001000,1,1);    /* SARAM8 */
    GEL_MapAdd(0x011000,1,0x001000,1,1);    /* SARAM9 */
    GEL_MapAdd(0x012000,1,0x001000,1,1);    /* SARAM10 */
    GEL_MapAdd(0x013000,1,0x001000,1,1);    /* SARAM11 */
    GEL_MapAdd(0x014000,1,0x001000,1,1);    /* SARAM12 */
    GEL_MapAdd(0x015000,1,0x001000,1,1);    /* SARAM13 */
    GEL_MapAdd(0x016000,1,0x001000,1,1);    /* SARAM14 */
    GEL_MapAdd(0x017000,1,0x001000,1,1);    /* SARAM15 */
    GEL_MapAdd(0x018000,1,0x001000,1,1);    /* SARAM16 */
    GEL_MapAdd(0x019000,1,0x001000,1,1);    /* SARAM17 */
    GEL_MapAdd(0x01A000,1,0x001000,1,1);    /* SARAM18 */
    GEL_MapAdd(0x01B000,1,0x001000,1,1);    /* SARAM19 */
    GEL_MapAdd(0x01C000,1,0x001000,1,1);    /* SARAM20 */
    GEL_MapAdd(0x01D000,1,0x001000,1,1);    /* SARAM21 */
    GEL_MapAdd(0x01E000,1,0x001000,1,1);    /* SARAM22 */
    GEL_MapAdd(0x01F000,1,0x001000,1,1);    /* SARAM23 */
    GEL_MapAdd(0x020000,1,0x001000,1,1);    /* SARAM24 */
    GEL_MapAdd(0x021000,1,0x001000,1,1);    /* SARAM25 */
    GEL_MapAdd(0x022000,1,0x001000,1,1);    /* SARAM26 */
    GEL_MapAdd(0x023000,1,0x001000,1,1);    /* SARAM27 */
    GEL_MapAdd(0x024000,1,0x001000,1,1);    /* SARAM28 */
    GEL_MapAdd(0x025000,1,0x001000,1,1);    /* SARAM29 */
    GEL_MapAdd(0x026000,1,0x001000,1,1);    /* SARAM30 */
    GEL_MapAdd(0x027000,1,0x001000,1,1);    /* SARAM31 */

    /* External-Memory */
    GEL_MapAdd(0x028000,1,0x3D8000,1,1);    /* External-SDRAM */
    GEL_MapAdd(0x400000,1,0x200000,1,1);    /* External-Async */
    GEL_MapAdd(0x600000,1,0x100000,1,1);    /* External-Async */
    GEL_MapAdd(0x700000,1,0x080000,1,1);    /* External-Async */
    GEL_MapAdd(0x780000,1,0x070000,1,1);    /* External-Async */

    /* ROM */
    GEL_MapAdd(0x7F0000,1,0x004000,1,0);    /* SAROM0 */
    GEL_MapAdd(0x7F4000,1,0x004000,1,0);    /* SAROM1 */
    GEL_MapAdd(0x7F8000,1,0x004000,1,0);    /* SAROM2 */
    GEL_MapAdd(0x7FC000,1,0x004000,1,0);    /* SAROM3 */

    /* IO Space */
    GEL_MapAdd(0x0000,2,0xFFFF,1,1);        /* XPORT */
}

ProgramPLL_BYPASS() {
	int i;
    GEL_TextOut("Configure PLL BYPASS.\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    GEL_TextOut("PLL BYPASS.\n");
}

ProgramPLL_CLKOUT_ON() {
	int i;
    GEL_TextOut("Configure PLL CLKOUT On.\n");
	// Enable clocks to all peripherals
	GEL_TextOut("Enabling clkout.\n");

    // CLKOUT
    *(short *)CLKOUT_CFG@IO = 0x0;

    GEL_TextOut("PLL BYPASS.\n");
}

ProgramPLL_1MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (1.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x29AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x3807;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (1.00 MHz).\n");
}

ProgramPLL_2MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (2.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x29AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x1807;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (2.00 MHz).\n");
}

ProgramPLL_4MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (4.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x29AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0807;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (4.00 MHz).\n");
}

ProgramPLL_8MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (8.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x29AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0007;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (8.00 MHz).\n");
}

ProgramPLL_10MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (10.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x41AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x2001;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (10.00 MHz).\n");
}

ProgramPLL_25MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (25.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x28AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0024;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (25.00 MHz).\n");
}

ProgramPLL_50MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (50.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3100;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0022;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (50.00 MHz).\n");
}

ProgramPLL_60MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (60.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3B00;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0022;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (60.00 MHz).\n");
}

ProgramPLL_75MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (75.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3100;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0021;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (75.00 MHz).\n");
}

ProgramPLL_80MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (80.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3456;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0021;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (80.00 MHz).\n");
}

ProgramPLL_90MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (90.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3B00;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0021;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (90.00 MHz).\n");
}

ProgramPLL_100MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (100.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x41AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0000;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (100.00 MHz).\n");
}

ProgramPLL_12MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (100.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x200;
    *(short *)PLL_CNTL2@IO = 0x0000;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (100.00 MHz).\n");
}


ProgramPLL_120MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (120.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x4F00;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0021;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (120.00 MHz).\n");
}

ProgramPLL_125MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (125.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x28AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (125.00 MHz).\n");
}

ProgramPLL_128MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (128.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x29AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (128.00 MHz).\n");
}

ProgramPLL_150MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (150.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3100;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (150.00 MHz).\n");
}

ProgramPLL_160MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (160.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3456;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (160.00 MHz).\n");
}

ProgramPLL_175MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (175.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3956;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (175.00 MHz).\n");
}

ProgramPLL_180MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (180.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3B00;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (180.00 MHz).\n");
}

ProgramPLL_190MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (190.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x3E56;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (190.00 MHz).\n");
}

ProgramPLL_200MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (200.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x41AB;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (200.00 MHz).\n");
}

ProgramPLL_225MHz_clksel0() {
	int i;
    GEL_TextOut("Configure PLL (225.00 MHz).\n");

    // bypass PLL
    *(short *)CLKCFGMSW@IO = 0x0;

    *(short *)PLL_CNTL1@IO = 0x4A00;
    *(short *)PLL_CNTL2@IO = 0x0003;
    *(short *)PLL_CNTL3@IO = 0x0010;
    *(short *)PLL_CNTL4@IO = 0x0020;

	// Wait several cycles for the PLL to lock
    for(i=0;i<20000;i++);

    // Switch to PLL clk
    *(short *)CLKCFGMSW@IO = 0x1;

    GEL_TextOut("PLL Init Done (225.00 MHz).\n");
}
